$icomoon-font-path: "../fonts";

// Options
$enable-grid-classes: true !default;

//$colors: base forestGreen green limeGreen mediumSeaGreen paleGreen;

$colors: (
  base:           #000,
  forestGreen:    #2f9d6e,
  green:          #1ac079,
  limeGreen:      #1abf7a,
  mediumSeaGreen: #1cd988,
  mediumGreen:    #26b97a,
  paleGreen:      #1cd988,
  gray:           #989898,
  grayLight:      #e6e6e6,
  grayMedium:     #e7e7e7,
);

$brand-primary:             #0275d8 !default;
$brand-success:             #2f9d6e !default;
$brand-info:                #5bc0de !default;
$brand-warning:             #f0ad4e !default;
$brand-danger:              #d9534f !default;

$form-icon-success: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%235cb85c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E") !default;
$form-icon-warning: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23f0ad4e' d='M4.4 5.324h-.8v-2.46h.8zm0 1.42h-.8V5.89h.8zM3.76.63L.04 7.075c-.115.2.016.425.26.426h7.397c.242 0 .372-.226.258-.426C6.726 4.924 5.47 2.79 4.253.63c-.113-.174-.39-.174-.494 0z'/%3E%3C/svg%3E") !default;
$form-icon-danger: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23d9534f' viewBox='-2 -2 7 7'%3E%3Cpath stroke='%23d9534f' d='M0 0l3 3m0-3L0 3'/%3E%3Ccircle r='.5'/%3E%3Ccircle cx='3' r='.5'/%3E%3Ccircle cy='3' r='.5'/%3E%3Ccircle cx='3' cy='3' r='.5'/%3E%3C/svg%3E") !default;

// $link-color:            map-deep-get($colors, 'limeGreen');
$link-color:            #2d9e6e;
$link-decoration:       none !default;
$link-weight:           400 !default;
// $link-hover-color:      map-deep-get($colors, 'mediumSeaGreen');
$link-hover-color:      darken(map_get($colors, mediumSeaGreen), 5);
$link-hover-decoration: none !default;

$font-family-base: Roboto, sans-serif;

$font-size-root: 14px !default;

$font-size-base: 14px !default;
$font-size-lg:   1.25rem !default;
$font-size-sm:   .875rem !default;
$font-size-xs:   .75rem !default;

$spacer:   1rem !default;

$line-height-base: normal !default;

$font-size-h1: 48px !default;
$font-size-h2: 28px !default;
$font-size-h3: 24px !default;
$font-size-h4: 18px !default;
$font-size-h5: 1.25rem !default;
$font-size-h6: 1rem !default;

$headings-margin-bottom: ($spacer / 2) !default;
$headings-font-family:   inherit !default;
$headings-font-weight:   300 !default;
$headings-line-height:   1.1 !default;

$btn-background: (
        'default': #565656,
        'success': #468847,
        'danger':  #b94a48,
        'warning': #c09853,
        'info':    #3a87ad
) !default;

$btn-padding-x:   1rem !default;
$btn-padding-y:   .5rem !default;
$btn-line-height: 1.25 !default;
$btn-font-weight: 300 !default;
$btn-font-size:   14px !default;


// .ui-text--*
$text-size-xs:        11.5px; //0.82rem;
$text-line-height-xs: 20px; //1.43rem;

$text-size-sm:        13.5px; //0.93rem;
$text-line-height-sm: 24px; //1.7rem;

$text-size-lg:        18px; //1.3rem;
$text-line-height-lg: 30px; //2.2rem;

$text-size-xl:        24px; //1.7rem;
$text-line-height-xl: 2.8rem;


// @mixin _assert-ascending($map, $map-name) {
//   $prev-key: null;
//   $prev-num: null;
//   @each $key, $num in $map {
//     @if $prev-num == null {
//       // Do nothing
//     } @else if not comparable($prev-num, $num) {
//       @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
//     } @else if $prev-num >= $num {
//       @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
//     }
//     $prev-key: $key;
//     $prev-num: $num;
//   }
// }

// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  sl: 1440px
) !default;
// @include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
// @include _assert-starts-at-zero($grid-breakpoints);


// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  sl: 1380px
) !default;
// @include _assert-ascending($container-max-widths, "$container-max-widths");


// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns:               12 !default;
$grid-gutter-width-base:     30px !default;
$grid-gutter-widths: (
  xs: $grid-gutter-width-base,
  sm: $grid-gutter-width-base,
  md: $grid-gutter-width-base,
  lg: $grid-gutter-width-base,
  xl: $grid-gutter-width-base
) !default;


// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.

$spacer-x: 20px !default;
$spacer-y: 20px !default;
$spacers: (
  0: (
    x: 0,
    y: 0
  ),
  1: (
    x: ($spacer-x * .5),
    y: ($spacer-y * .5)
  ),
  2: (
    x: $spacer-x,
    y: $spacer-y
  ),
  3: (
    x: ($spacer-x * 1.5),
    y: ($spacer-y * 1.5)
  ),
  4: (
    x: ($spacer-x * 2),
    y: ($spacer-y * 2)
  ),
  5: (
    x: ($spacer-x * 3),
    y: ($spacer-y * 3)
  )
) !default;